The ability to reuse components and use similarities to create "API's" gives REACT its composability.

JSX compiles the REACT components into stand-alone JavaScript.

Comments are created by creating a request ot the /api/comments endpoint, which reads in from the comments file. The comment object is then created and the DOM is updated.

Props is immutable, this works top-down so that the property is passed from parent to child as needed. State is mutable, and is able to be changed and updated in order to react to any user interaction.

When deleting a comment from the comments.json, the page automitcally updates the comment list to not include that comment. This is because it autmotically makes a call out to the /api/comments at a selected interval.

There is no need to call render because when the state is changed, the DOM is automatically updated only where it needs to update.

Components should always represent the current state of view so that the user is seeing the most current data.

If the server were to reject a new comment, I believe that this would be handled so quickly, that this would not affect the user all that much.
